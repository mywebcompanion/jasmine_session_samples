JavaScript – the bad parts
There are many complications when dealing with client JavaScript code; the obvious one,
 is that you cannot control the client's runtime. While on the server, you can run a specific version of your Node.js server,
you can't oblige your clients to run the latest version of Chrome or Firefox.

Jasmine is a little behavior-driven development (BDD) test framework created by the developers at Pivotal Labs,
to allow you to write automated JavaScript unit tests.

With Jasmine, as with other BDD frameworks, each acceptance criterion directly translates to a test unit.
For that reason, each test unit is usually called a spec, short for specification.

Jasmine Jargons
================

Behaviour Driven Development (BDD)
version 2.1.3 - https://github.com/jasmine/jasmine/releases
SpecRunner.html
Jasmine browser spec runner
Headless Browser - phantom JS, EnvJS
The describe function is a global Jasmine function used to define test contexts
When used as the first call in a spec, it creates a new test suite (a collection of test cases).
It accepts two parameters, which are as follows:
    The name of the test suite—in this case, Investment
    A function that will contain all its specs
COntext,event,action
Test suite - Ac olleciton of test cases
it - Another global jasmine function.
Each test case is also called spec?

Assertion (or expectation) is a comparison between two values that must result in a boolean value
The assertion is only considered a success if the result of the comparison is true
In Jasmine, assertions are written using the global Jasmine function expect,
along with a matcher that indicates what comparison must be made with the values.

setup and teardown functions - beforeEach and afterEach
beforeEach - Remove duplicates
afterEach - tearDown

Jasmine Matchers - toBe and toEqual.
Custom Matchers - jasmine.addMatchers function that will inturn return a compare function with result.

built-in matchers

toEqual - It works for all primitive values (number, string, and boolean) as well as any object (including arrays)
It is advised that you use the toEqual operator in most cases and resort to the toBe matcher only when you want to check whether two variables reference the same object.
Jasmine's toBe matcher is nothing more than a wrapper for a strict equality comparison
http://stackoverflow.com/questions/22413009/javascript-using-methods-to-compare

toBeTruthy() , toBeFalsy()
toBeFalsy is true when expected value is null, NaN, "", 0, undefined. Everythingelse is toBeTruthy including empty array and object.


toBeUndefined(), toBeNull(), toBeNaN();
toBeNull is euql to toBe(null) but its not true with toBeNan()

toContain - expect("My big string").toContain("big"); expect([1, 2, 3]).toContain(2);

toMatch() - Regex matcher .  expect("My big matched string").toMatch(/My(.+)string/);

toBeLessThan, toBeGreaterThan - expect(1).toBeLessThan(2);

toBeCloseTo - This is a special matcher used to compare floating-point numbers with a defined set of precision
expect(3.1415).toBeCloseTo(2.8, 0); he first parameter is the number being compared, and the second is the precision in the number of decimal cases.

toThrow - The way it works is a little bit different from the other matchers. Since the matcher has to run a piece of code and check whether it throws an exception, the matcher's actual value must be a function.
describe("toThrow", function() {
  it("should pass when the exception is thrown", function() {
    expect(function () {
      throw "Some exception";
    }).toThrow("Some exception");
  });
});

jasmine spies
==============

- Built for mocking single functions
- replacement mocking and pass-through mocking.
- Has built-in matchers
There are two ways to create a spy in Jasmine:
* spyOn
* jasmine.createSpy . Basic Usage : spyOn(object,"methodName");
spyOn can only be used when the method already exists on the object, whereas jasmine.createSpy will return a function.



